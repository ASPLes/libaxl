<pre>
&lt;<span class="node">mod-def</span>>
   &lt;<span class="node">name</span>>mod-template&lt;/<span class="node">name</span>>
   &lt;<span class="node">description</span>>Place here a generic module description&lt;/<span class="node">description</span>>
   &lt;<span class="node">source-code</span>>
      <span class="comment">&lt;!--  init method, called once the module is loaded  --></span>
      &lt;<span class="node">init</span>><span class="cdata">&lt;![CDATA[</span>/* Place here your mod init code. This will be called once turbulence decides to include the module. */
return axl_true;<span class="cdata">]]></span>&lt;/<span class="node">init</span>>
      <span class="comment">&lt;!--  close method, called once the module is going to be stoped  --></span>
      &lt;<span class="node">close</span>><span class="cdata">&lt;![CDATA[</span>/* Place here the code required to stop and dealloc resources used by your module */<span class="cdata">]]></span>&lt;/<span class="node">close</span>>
      <span class="comment">&lt;!--  reconf method, called once it is received a 'reconfiguration signal'  --></span>
      &lt;<span class="node">reconf</span>><span class="cdata">&lt;![CDATA[</span>/* Place here all your optional reconf code if the HUP signal is received */<span class="cdata">]]></span>&lt;/<span class="node">reconf</span>>
      <span class="comment">&lt;!--  unload method, called once the module is required to be unloaded from memory due to child process creation (or similar)  --></span>
      &lt;<span class="node">unload</span>><span class="cdata">&lt;![CDATA[</span>/* Place here the code required to dealloc resources used by your module because turbulence signaled the child process must not have access (using unload-after-fork option) */<span class="cdata">]]></span>&lt;/<span class="node">unload</span>>
   &lt;/<span class="node">source-code</span>>
&lt;/<span class="node">mod-def</span>>
</pre>
